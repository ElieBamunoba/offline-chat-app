// Autogenerated from Pigeon (v9.0.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface Chat ()
+ (Chat *)fromList:(NSArray *)list;
+ (nullable Chat *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation Chat
+ (instancetype)makeWithMessage:(nullable NSString *)message
    clients:(nullable NSString *)clients {
  Chat* pigeonResult = [[Chat alloc] init];
  pigeonResult.message = message;
  pigeonResult.clients = clients;
  return pigeonResult;
}
+ (Chat *)fromList:(NSArray *)list {
  Chat *pigeonResult = [[Chat alloc] init];
  pigeonResult.message = GetNullableObjectAtIndex(list, 0);
  pigeonResult.clients = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable Chat *)nullableFromList:(NSArray *)list {
  return (list) ? [Chat fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.message ?: [NSNull null]),
    (self.clients ?: [NSNull null]),
  ];
}
@end

@interface ChatApiCodecReader : FlutterStandardReader
@end
@implementation ChatApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [Chat fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface ChatApiCodecWriter : FlutterStandardWriter
@end
@implementation ChatApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[Chat class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface ChatApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ChatApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ChatApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ChatApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ChatApiGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    ChatApiCodecReaderWriter *readerWriter = [[ChatApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void ChatApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ChatApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ChatApi.search"
        binaryMessenger:binaryMessenger
        codec:ChatApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(searchKeyword:error:)], @"ChatApi api (%@) doesn't respond to @selector(searchKeyword:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_keyword = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSArray<Chat *> *output = [api searchKeyword:arg_keyword error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
